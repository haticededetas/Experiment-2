//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/JoyStickControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoyStickControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoyStickControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JoyStickControl"",
    ""maps"": [
        {
            ""name"": ""Response"",
            ""id"": ""6468efe6-db71-4473-b795-a3df0999ae4a"",
            ""actions"": [
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2ed55659-07eb-4dd0-ab74-1e2ab239849b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""fc6935f1-4830-4668-bb04-f0ca61a57c80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MakeDec"",
                    ""type"": ""Button"",
                    ""id"": ""218e6958-67da-4c53-bf76-624c2a157360"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Straight"",
                    ""type"": ""Button"",
                    ""id"": ""2626de58-369b-4089-8168-5d6fc294babb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnRight"",
                    ""type"": ""Button"",
                    ""id"": ""a3d3d28d-af4a-44cb-bb5f-92ded557dc29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e2a4476d-d261-4bfe-aec6-0dc91902f1c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9784bd2b-1485-436c-906d-6bb2add0a0c3"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0140430-2888-4ea9-9b32-d205318ce721"",
                    ""path"": ""<XInputController>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d0a7711-0763-441e-b763-19d408a9d646"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afefec89-2eae-4cdc-b273-750e252bc1e5"",
                    ""path"": ""<XInputController>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d16742-7fcf-44a1-a176-d3eabbcc7944"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MakeDec"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9412684c-60c7-419b-86b1-965d78906ab9"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MakeDec"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45a0f41a-51c2-41a2-95b3-07efa3ef9d0a"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Straight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c64e6f3e-b38a-457d-a8ef-8c55edc5f4db"",
                    ""path"": ""<XInputController>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Straight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5ddaba9-2c41-4d30-acb3-5e89696819c8"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eda317a5-44a5-4b31-a8ba-8480e7a99b9b"",
                    ""path"": ""<XInputController>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""825994a4-6a68-4ebb-9a5c-6be52bde9137"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9894f6ba-c9cb-42b0-9f5b-dcebb15ab059"",
                    ""path"": ""<XInputController>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Response
        m_Response = asset.FindActionMap("Response", throwIfNotFound: true);
        m_Response_RotateLeft = m_Response.FindAction("RotateLeft", throwIfNotFound: true);
        m_Response_RotateRight = m_Response.FindAction("RotateRight", throwIfNotFound: true);
        m_Response_MakeDec = m_Response.FindAction("MakeDec", throwIfNotFound: true);
        m_Response_Straight = m_Response.FindAction("Straight", throwIfNotFound: true);
        m_Response_TurnRight = m_Response.FindAction("TurnRight", throwIfNotFound: true);
        m_Response_TurnLeft = m_Response.FindAction("TurnLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Response
    private readonly InputActionMap m_Response;
    private List<IResponseActions> m_ResponseActionsCallbackInterfaces = new List<IResponseActions>();
    private readonly InputAction m_Response_RotateLeft;
    private readonly InputAction m_Response_RotateRight;
    private readonly InputAction m_Response_MakeDec;
    private readonly InputAction m_Response_Straight;
    private readonly InputAction m_Response_TurnRight;
    private readonly InputAction m_Response_TurnLeft;
    public struct ResponseActions
    {
        private @JoyStickControl m_Wrapper;
        public ResponseActions(@JoyStickControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateLeft => m_Wrapper.m_Response_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_Response_RotateRight;
        public InputAction @MakeDec => m_Wrapper.m_Response_MakeDec;
        public InputAction @Straight => m_Wrapper.m_Response_Straight;
        public InputAction @TurnRight => m_Wrapper.m_Response_TurnRight;
        public InputAction @TurnLeft => m_Wrapper.m_Response_TurnLeft;
        public InputActionMap Get() { return m_Wrapper.m_Response; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ResponseActions set) { return set.Get(); }
        public void AddCallbacks(IResponseActions instance)
        {
            if (instance == null || m_Wrapper.m_ResponseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ResponseActionsCallbackInterfaces.Add(instance);
            @RotateLeft.started += instance.OnRotateLeft;
            @RotateLeft.performed += instance.OnRotateLeft;
            @RotateLeft.canceled += instance.OnRotateLeft;
            @RotateRight.started += instance.OnRotateRight;
            @RotateRight.performed += instance.OnRotateRight;
            @RotateRight.canceled += instance.OnRotateRight;
            @MakeDec.started += instance.OnMakeDec;
            @MakeDec.performed += instance.OnMakeDec;
            @MakeDec.canceled += instance.OnMakeDec;
            @Straight.started += instance.OnStraight;
            @Straight.performed += instance.OnStraight;
            @Straight.canceled += instance.OnStraight;
            @TurnRight.started += instance.OnTurnRight;
            @TurnRight.performed += instance.OnTurnRight;
            @TurnRight.canceled += instance.OnTurnRight;
            @TurnLeft.started += instance.OnTurnLeft;
            @TurnLeft.performed += instance.OnTurnLeft;
            @TurnLeft.canceled += instance.OnTurnLeft;
        }

        private void UnregisterCallbacks(IResponseActions instance)
        {
            @RotateLeft.started -= instance.OnRotateLeft;
            @RotateLeft.performed -= instance.OnRotateLeft;
            @RotateLeft.canceled -= instance.OnRotateLeft;
            @RotateRight.started -= instance.OnRotateRight;
            @RotateRight.performed -= instance.OnRotateRight;
            @RotateRight.canceled -= instance.OnRotateRight;
            @MakeDec.started -= instance.OnMakeDec;
            @MakeDec.performed -= instance.OnMakeDec;
            @MakeDec.canceled -= instance.OnMakeDec;
            @Straight.started -= instance.OnStraight;
            @Straight.performed -= instance.OnStraight;
            @Straight.canceled -= instance.OnStraight;
            @TurnRight.started -= instance.OnTurnRight;
            @TurnRight.performed -= instance.OnTurnRight;
            @TurnRight.canceled -= instance.OnTurnRight;
            @TurnLeft.started -= instance.OnTurnLeft;
            @TurnLeft.performed -= instance.OnTurnLeft;
            @TurnLeft.canceled -= instance.OnTurnLeft;
        }

        public void RemoveCallbacks(IResponseActions instance)
        {
            if (m_Wrapper.m_ResponseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IResponseActions instance)
        {
            foreach (var item in m_Wrapper.m_ResponseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ResponseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ResponseActions @Response => new ResponseActions(this);
    public interface IResponseActions
    {
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
        void OnMakeDec(InputAction.CallbackContext context);
        void OnStraight(InputAction.CallbackContext context);
        void OnTurnRight(InputAction.CallbackContext context);
        void OnTurnLeft(InputAction.CallbackContext context);
    }
}
